version: '3.8'
services:
  vue:
    build:
      context: ./vue/docker
    image: iot_etage/vue
    container_name: vue
    hostname: vue
    restart: always
    depends_on:
      - 'java'
    healthcheck:
      test: 'curl -f http://localhost:8080 -k'
    ports:
      - '8080:8080'
      - '8081:8081'
    volumes:
      - ./vue/src/iot_etage:/app
    environment:
      - TEST=test
    networks:
      iot-network:
        ipv4_address: 192.16.1.10
    command: '/app/node_modules/.bin/vue-cli-service serve --host 0.0.0.0 --port 8080'
    #command: '/bin/bash'
    #tty: true
    #logging:
    #  driver: 'none'

  worker:
    build:
      context: ./nodejs_worker/docker
    image: iot_etage/worker
    container_name: worker
    hostname: worker
    restart: always
    environment:
      - MQTT_HOST='192.16.1.40'
      - MQTT_PORT=1883
      - MQTT_USER=user
      - MQTT_PASS=user
      - MQTT_SENSORDATA_TOPIC=sensor
    depends_on:
      - 'mosquitto'
      - 'java'
    ports:
      - '3000:3000'
      - '3001:3001'
    volumes:
      - ./nodejs_worker/src:/worker
    networks:
      iot-network:
        ipv4_address: 192.16.1.20
    command: 'node index.js'

  api:
    build:
      context: ./nodejs_api/docker
    image: iot_etage/api
    container_name: api
    hostname: api
    restart: always
    depends_on:
      - 'postgres'
    ports:
      - '3002:3002'
      - '3003:3003'
    volumes:
      - ./nodejs_api/src:/api
    networks:
      iot-network:
        ipv4_address: 192.16.1.25
    command: 'node index.js'

  java:
    build:
      context: ./java/docker
    image: iot_etage/java
    container_name: java
    hostname: java
    restart: always
    depends_on:
      - 'postgres'
      - 'mosquitto'
    healthcheck:
      test: 'curl -f http://localhost:8090 -k'
    ports:
      - '8090:8090'
      - '8091:8091'
    volumes:
      - ./java/src/IoT-Etage:/app
      - ./java/.m2:/root
    environment:
      - TEST=test
    networks:
      iot-network:
        ipv4_address: 192.16.1.30
    #command: 'java -agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=0.0.0.0:8090 de.thkoeln.syp.IoTEtageApplication'
    command: '/bin/bash'
    tty: true
    #logging:
    #  driver: 'none'

  mosquitto:
    build:
      context: ./mosquitto/docker
    image: iot_etage/mosquitto
    container_name: mosquitto
    hostname: mosquitto
    restart: always
    healthcheck:
      test: 'curl -X GET "http://localhost:1883/iot/about"'
    ports:
      - '1884:1883'
      - '1885:1884'
    volumes:
      - ./mosquitto/configs/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    environment:
      - TEST=Test
    networks:
      iot-network:
        ipv4_address: 192.16.1.40

  postgres:
    build:
      context: ./postgres/docker
    image: iot_etage/postgres
    container_name: postgres
    hostname: postgres
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - TZ=Europe/Berlin
      - PGTZ=Europe/Berlin
      - POSTGRES_PASSWORD=admin_password
    networks:
      iot-network:
        ipv4_address: 192.16.1.50
    #command: '/bin/bash'
    #tty: true
    #logging:
    #  driver: 'none'

networks:
  iot-network:
    name: iot-network
    ipam:
      driver: default
      config:
        - subnet: '192.16.1.0/24'

volumes:
  postgres-data:
