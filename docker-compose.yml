version: '3.8'
services:
  angular:
    build:
      context: ./angular/docker
    image: iot_etage/angular
    container_name: angular
    hostname: angular
    restart: always
    depends_on:
      - 'django'
      #- 'java'
    healthcheck:
      test: 'curl -f http://localhost:4200 -k'
    ports:
      - '4200:4200'
      - '4201:4201'
    volumes:
      - ./angular/src/IOT-ETAGE:/app
    environment:
      - TEST=test
    networks:
      iot-network:
        ipv4_address: 192.16.1.10
    command: 'ng serve --host "0.0.0.0"'
    #command: '/bin/bash'
    #tty: true
    #logging:
    #  driver: 'none'

  # vue:
  #   build:
  #     context: ./vue/docker
  #   image: iot_etage/vue
  #   container_name: vue
  #   hostname: vue
  #   restart: always
  #   depends_on:
  #     - 'django'
  #     #- 'java'
  #   healthcheck:
  #     test: 'curl -f http://localhost:4200 -k'
  #   ports:
  #     - '4200:4200'
  #   volumes:
  #     - ./vue/src:/app
  #   environment:
  #     - TEST=test
  #   networks:
  #     iot-network:
  #       ipv4_address: 192.16.1.20
  #   command: 'ng server --host "0.0.0.0"'
  #   #command: '/bin/bash'
  #   #tty: true
  #   #logging:
  #   #  driver: 'none'

  django:
    build:
      context: ./django/docker
    image: iot_etage/django
    container_name: django
    hostname: django
    restart: always
    depends_on:
      - 'mongo'
      - 'mysql'
      - 'postgres'
    healthcheck:
      test: 'curl -f http://localhost:4200 -k'
    ports:
      - '8000:8000'
      - '8001:8001'
    volumes:
      - ./django/src/IOT_ETAGE:/app
    environment:
      - TEST=test
    networks:
      iot-network:
        ipv4_address: 192.16.1.30
    command: 'python3 manage.py runserver 0.0.0.0:8000'
    #command: '/bin/bash'
    #tty: true
    #logging:
    #  driver: 'none'

  # java:
  #   build:
  #     context: ./java/docker
  #   image: iot_etage/java
  #   container_name: java
  #   hostname: java
  #   restart: always
  #   depends_on:
  #     - 'mongo'
  #     - 'mysql'
  #     - 'postgres'
  #   healthcheck:
  #     test: 'curl -f http://localhost:4200 -k'
  #   ports:
  #     - '4200:4200'
  #   volumes:
  #     - ./java/src:/app
  #   environment:
  #     # - TEST=test
  #   networks:
  #     iot-network:
  #       ipv4_address: 192.16.1.40
  #   command: # ...
  #   #command: '/bin/bash'
  #   #tty: true
  #   #logging:
  #   #  driver: 'none'

  mongo:
    build:
      context: ./mongo/docker
    image: iot_etage/mongo
    container_name: mongo
    hostname: mongo
    restart: always
    healthcheck:
      test: echo "db.runCommand("ping").ok | mongo localhost:27017/test --quite"
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    environment:
      - TEST=test
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=iot_etage_blue
      - MONGODB_USERNAME=iot-etage-blue-admin
      - MONGODB_PASSWORD=iot-etage-blue-password
    networks:
      iot-network:
        ipv4_address: 192.16.1.50
    #command: '/bin/bash'
    #tty: true
    #logging:
    #  driver: 'none'

  mysql:
    build:
      context: ./mysql/docker
    image: iot_etage/mysql
    container_name: mysql
    hostname: mysql
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
    ports:
      - '3306:3306'
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      - TEST=test
      - POSTGRES_PASSWORD=admin_password
    networks:
      iot-network:
        ipv4_address: 192.16.1.60
    #command: '/bin/bash'
    #tty: true
    #logging:
    #  driver: 'none'

  postgres:
    build:
      context: ./postgres/docker
    image: iot_etage/postgres
    container_name: postgres
    hostname: postgres
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql
    environment:
      - TEST=test
      - POSTGRES_PASSWORD=admin_password
    networks:
      iot-network:
        ipv4_address: 192.16.1.70
    #command: '/bin/bash'
    #tty: true
    #logging:
    #  driver: 'none'

networks:
  iot-network:
    name: iot-network
    ipam:
      driver: default
      config:
        - subnet: '192.16.1.0/24'

volumes:
  mongo-data:
  mysql-data:
  postgres-data:
